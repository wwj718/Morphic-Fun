Morph subclass: #PicoPaintMorph	instanceVariableNames: 'form brush lastMouse'	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Fun'!!PicoPaintMorph methodsFor: 'as yet unclassified' stamp: 'wwj718 8/24/2022 11:05'!clearform fillColor: Color veryLightGray. self changed.! !!PicoPaintMorph methodsFor: 'menus' stamp: 'wwj718 8/24/2022 11:05'!addCustomMenuItems: aCustomMenu hand: aHandMorph super addCustomMenuItems: aCustomMenu hand: aHandMorph. aCustomMenu add: 'clear' action: #clear.! !!PicoPaintMorph methodsFor: 'drawing' stamp: 'wwj718 8/24/2022 10:48'!drawOn: aCanvasaCanvas drawImage: form at: bounds origin.! !!PicoPaintMorph methodsFor: 'geometry' stamp: 'wwj718 8/24/2022 10:31'!extent: aPoint| newForm |super extent: aPoint.newForm := Form extent: self extent depth: 16. newForm fillColor: Color veryLightGray.form ifNotNil: [form displayOn: newForm].form := newForm.! !!PicoPaintMorph methodsFor: 'event handling' stamp: 'wwj718 8/24/2022 10:38'!handlesMouseDown: evt^ true! !!PicoPaintMorph methodsFor: 'event handling' stamp: 'wwj718 8/24/2022 17:28'!mouseDown: evt"To keep simple, use the original version, without optimization"brush := Pen newOnForm: form.brush roundNib: 3.brush color: Color red.lastMouse := evt cursorPoint - bounds origin. brush drawFrom: lastMouse to: lastMouse. self changed.! !!PicoPaintMorph methodsFor: 'event handling' stamp: 'wwj718 8/24/2022 17:28'!mouseMove: evt"morphic considers the entire sequence of mouse down, repeated mouse moves, and mouse up to be a single transaction.To keep simple, use the original version, without optimization"|p|p := evt cursorPoint - bounds origin. "Transcript show: p; cr."p = lastMouse ifTrue: [^ self].brush drawFrom: lastMouse to: p. lastMouse := p.self changed.! !!PicoPaintMorph methodsFor: 'initialization' stamp: 'wwj718 8/24/2022 10:34'!initializesuper initialize.self extent: 200@150.! !Object subclass: #TestAlignmentMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Fun'!!TestAlignmentMorph commentStamp: 'wwj718 8/24/2022 12:42' prior: 0!AlignmentMorph	Since all morphs now support layoutPolicy the main use of this class is no longer needed.LayoutPolicy https://wiki.squeak.org/squeak/2142!]style[(156)c000124124i!!TestAlignmentMorph methodsFor: 'as yet unclassified' stamp: 'wwj718 8/24/2022 12:42'!testShrinkWrap"Shift click on the label to edit it."|r|r := AlignmentMorph newRow. r borderWidth: 1.r hResizing: #shrinkWrap.r vResizing: #shrinkWrap.r addMorph: (StringMorph contents: 'Edit this text!!'). r openInWorld! !!TestAlignmentMorph methodsFor: 'as yet unclassified' stamp: 'wwj718 8/24/2022 12:42'!testSpaceFilling|r|r := AlignmentMorph newRow color: Color darkGray.r addMorphBack: (SimpleButtonMorph new label: 'One').r addMorphBack: (AlignmentMorph newSpacer: Color white). r addMorphBack: (SimpleButtonMorph new label: 'Two').r addMorphBack: (AlignmentMorph newSpacer: Color white). r addMorphBack: (SimpleButtonMorph new label: 'Three')."r inset: 4.r centering: #center."r openInWorld! !Morph subclass: #TestMorph	instanceVariableNames: 'angle'	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Fun'!!TestMorph methodsFor: 'as yet unclassified' stamp: 'wwj718 8/23/2022 19:47'!acceptDroppingMorph: aMorph event: evtself color: aMorph color.! !!TestMorph methodsFor: 'as yet unclassified' stamp: 'wwj718 8/23/2022 19:12'!drawOn: aCanvas| colors |colors := color wheel: 6. colors withIndexDo: [:c :i |aCanvas fillOval: (self bounds insetBy: 4 * i) color: c].! !!TestMorph methodsFor: 'as yet unclassified' stamp: 'wwj718 8/23/2022 19:36'!handlesMouseDown: evt^ evt shiftPressed not! !!TestMorph methodsFor: 'as yet unclassified' stamp: 'wwj718 8/23/2022 19:57'!initializesuper initialize. angle := 0.! !!TestMorph methodsFor: 'as yet unclassified' stamp: 'wwj718 8/23/2022 19:58'!mouseDown: evtangle := 0.self startStepping.! !!TestMorph methodsFor: 'as yet unclassified' stamp: 'wwj718 8/23/2022 19:58'!stepangle := angle + 5.angle > 360 ifTrue: [^ self stopStepping].self position: self position + (Point r: 8 degrees: angle).! !!TestMorph methodsFor: 'as yet unclassified' stamp: 'wwj718 8/23/2022 20:05'!stepTime^20! !!TestMorph methodsFor: 'as yet unclassified' stamp: 'wwj718 8/23/2022 19:47'!wantsDroppedMorph: aMorph event: evt^ true! !